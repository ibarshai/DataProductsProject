newdata
lines(mtcars$wt, predict(fitFinalNoAM, newdata, interval="predict"))
temp = predict(fitFinalNoAM, newdata, interval="predict")
temp
length(mtcars$wt)
abline(mtcars$wt, temp[,1])
cbind(mtcars$wt, temp[,1])
lines(mtcars$wt, temp[,1])
lines(mtcars$wt, temp[,2])
lines(mtcars$wt, temp[,3])
newdata = data.frame(hp = rep(mean(mtcars$hp), 32), wt = mtcars$wt)
pfit = predict(fitFinalNoAM, newdata, interval="predict")
plot(mtcars$wt, mtcars$mpg, xlab = "Weight (1000lbs)", ylab = "MPG")
lines(mtcars$wt, pfit[,1])
lines(mtcars$wt, pfit[,2])
lines(mtcars$wt, pfit[,3])
newdata = data.frame(hp = rep(mean(mtcars$hp), length(mtcars$wt)), wt = mtcars$wt)
pfit = predict(fitFinalNoAM, newdata, interval="predict")
plot(mtcars$wt, mtcars$mpg, xlab = "Weight (1000lbs)", ylab = "MPG")
lines(mtcars$wt, pfit[,1])
lines(mtcars$wt, pfit[,2])
lines(mtcars$wt, pfit[,3])
```{r echo=FALSE, cache=TRUE, fig.width=4, fig.height=4}
```{r echo=FALSE, cache=TRUE, fig.width=3, fig.height=3}
```{r echo=FALSE, cache=TRUE, fig.width=10}
libeaey(MASS)
library(MASS)
?shuttle
data(shuttle)
data(shuttle)
head(shuttle)
unique(shuttle$use)
?glm
fit = glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit)
fit = glm(factor(use) ~ wind, data = shuttle, family = "binomial")
summary(fit)
fit = glm(use ~ factor(wind), data = shuttle, family = "binomial")
summary(fit)
exp(-.25131)
exp(-.03181)
?levels
levels(shuttle$use)
?reorder
exp(.03181)
fit2 = glm(use ~ factor(wind) + magn, data = shuttle, family = "binomial")
summary(fit2)
exp(-0.03201)
exp(0.03181)
reorder(shuttles$use, c("noauto", "auto"))
reorder(shuttle$use, c("noauto", "auto"))
relevel(shuttle$use, "auto")
relevel(shuttle$use, "noauto")
level(relevel(shuttle$use, "auto"))
levels(relevel(shuttle$use, "auto"))
levels(relevel(shuttle$use, "noauto"))
levels(shuttle$wind)
fit1 = glm(relevel(shuttle$use, "auto") ~ factor(shuttle$wind), family = "binomial")
fit1b = glm(use ~ factor(wind), data = shuttle, family = "binomial")
summary(fit1)
summary(fit1b)
fit1 = glm(relevel(shuttle$use, "auto") ~ factor(shuttle$wind), family = "binomial")
fit1b = glm(relevel(shuttle$use, "noauto") ~ factor(shuttle$wind), family = "binomial")
summary(fit1)
summary(fit1b)
exp(0.03181)
exp(0.03181)
exp(-0.03181)
fit2 = glm(relevel(shuttle$use, "auto") ~ factor(shuttle$wind) + shuttle$magn, family = "binomial")
fit2b = glm(relevel(shuttle$use, "noauto") ~ factor(shuttle$wind) + shuttle$magn, family = "binomial")
summary(fit2)
summary(fit2b)
summary(glm(shuttle$use, "auto" ~ factor(shuttle$wind), family = "binomial"))
summary(glm(shuttle$use ~ factor(shuttle$wind), family = "binomial"))
levels(relevel(shuttle$use, "auto"))
levels(shuttle$wind)
fit1 = glm(relevel(shuttle$use, "auto") ~ factor(shuttle$wind), family = "binomial")
summary(fit1)
exp(fit1$coef)
shuttle2 = shuttle
shuttle2$use[shuttle2$use=="auto",] = 1
head(shuttle2)
head(shuttle2, 20)
tail(shuttle2, 20)
shuttle2 = shuttle
temp[shuttle2$use=="auto",] = 1
as.numeric(temp)
temp = numeric()
temp[shuttle2$use=="auto",] = 1
temp = rep[0,nrows(shuttle)]
temp = rep[0,nrow(shuttle)]
temp = rep(0,nrow(shuttle))
temp[shuttle$use=="auto"] = 1
View(shuttle)
temp[128]
temp[129]
cbind(shuttle, temp)
summary(glm(temp ~ factor(wind), data=shuttle, family = "binomial"))
summary(glm(temp ~ factor(wind), data=shuttle, family = "binomial"))$coef
exp(summary(glm(temp ~ factor(wind), data=shuttle, family = "binomial"))$coef)
exp(summary(glm(temp ~ factor(relevel(wind, "tail"), data=shuttle, family = "binomial"))$coef)
exp(summary(glm(temp ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial"))$coef)
exp(summary(fit1b)$coef)
exp(summary(fit1)$coef)
exp(summary(glm(use ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial"))$coef)
exp(summary(glm(relevel(use, "noauto") ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial"))$coef)
# Question 1
fit1 = glm(relevel(use, "noauto") ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial")
exp(summary(fit1)$coef)
# Question 2
fit2 = glm(relevel(use, "noauto") ~ factor(relevel(wind, "tail")) + magn, data=shuttle, family = "binomial")
exp(summary(fit2)$coef)
fit3 = glm(relevel(use, "auto") ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial")
exp(summary(fit3)$coef)
exp(summary(fit1)$coef)
1/.9686888
summary(fit1)$coef
summary(fit3)$coef
summary(glm(relevel(use, "noauto") ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial"))
summary(glm(relevel(use, "noauto") ~ factor(relevel(wind, "head")), data=shuttle, family = "binomial"))
data(InsectSprays)
head(InsectSprays)
fit4 = glm(count ~ factor(spray), daya = InsectSprays, family = "poisson")
exp(summary(fit4)$coef)
fit4 = glm(count ~ factor(spray), data = InsectSprays, family = "poisson")
exp(summary(fit4)$coef)
fit4 = glm(count ~ spray, data = InsectSprays, family = "poisson")
exp(summary(fit4)$coef)
fit4 = glm(count ~ relevel(spray, "B"), data = InsectSprays, family = "poisson")
exp(summary(fit4)$coef)
?offset
data(mtcars)
view(mtcars)
head(mtcars)
par(mfrow = c(3,3), mar = c(4,4,1,2))
# Weight vs MPG for automatic and manual
plot(mtcars$wt,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "Weight", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$wt[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$wt[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$wt[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$wt[mtcars$am==1]), lwd = 2, col = "salmon")
abline(v=1.659, col="salmon"); abline(v=3.111, col="salmon") #90% of manual cars
abline(v=3.182, col="lightblue"); abline(v=5.269, col="lightblue") #90% of auto cars
# Horsepower vs MPG for automatic and manual
plot(mtcars$hp,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "Horsepower", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$hp[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$hp[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$hp[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$hp[mtcars$am==1]), lwd = 2, col = "salmon")
# Cylinders vs MPG for automatic and manual
plot(mtcars$cyl,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "# of Cylinders", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$cyl[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$cyl[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$cyl[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$cyl[mtcars$am==1]), lwd = 2, col = "salmon")
# Carbs vs MPG for automatic and manual
plot(mtcars$carb,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "# of Carbs", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$carb[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$carb[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$carb[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$carb[mtcars$am==1]), lwd = 2, col = "salmon")
# Gears vs MPG for automatic and manual
plot(mtcars$gear,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "# of Forward Gears", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$gear[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$gear[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$gear[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$gear[mtcars$am==1]), lwd = 2, col = "salmon")
# Displacement vs MPG for automatic and manual
plot(mtcars$disp,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "Displacement", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$disp[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$disp[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$disp[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$disp[mtcars$am==1]), lwd = 2, col = "salmon")
# Rear axle ratio vs MPG for automatic and manual
plot(mtcars$drat,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "Rear Axle Ratio", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$drat[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$drat[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$drat[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$drat[mtcars$am==1]), lwd = 2, col = "salmon")
# Quarter mile time vs MPG for automatic and manual
plot(mtcars$qsec,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "Quarter Mile Time (s)", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$qsec[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$qsec[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$qsec[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$qsec[mtcars$am==1]), lwd = 2, col = "salmon")
# V/S vs MPG for automatic and manual
plot(mtcars$vs,mtcars$mpg,type="n",frame=FALSE, xlab=NA, ylab=NA)
mtext(side = 1, "V/S", line = 2, cex = 0.6); mtext(side = 2, "MPG", line = 2, cex = 0.6)
points(mtcars$vs[mtcars$am==0],mtcars$mpg[mtcars$am==0],pch=21,col="black",bg="lightblue")
abline(lm(mtcars$mpg[mtcars$am==0] ~ mtcars$vs[mtcars$am==0]), lwd = 2, col = "lightblue")
points(mtcars$vs[mtcars$am==1],mtcars$mpg[mtcars$am==1],pch=21,col="black",bg="salmon")
abline(lm(mtcars$mpg[mtcars$am==1] ~ mtcars$vs[mtcars$am==1]), lwd = 2, col = "salmon")
# Question 1
library(MASS)
data(shuttle)
fit1 = glm(relevel(use, "noauto") ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial")
exp(summary(fit1)$coef)
# Question 2
fit2 = glm(relevel(use, "noauto") ~ factor(relevel(wind, "tail")) + magn, data=shuttle, family = "binomial")
exp(summary(fit2)$coef)
# Question 3
fit3 = glm(relevel(use, "auto") ~ factor(relevel(wind, "tail")), data=shuttle, family = "binomial")
exp(summary(fit3)$coef)
# Question 4
data(InsectSprays)
fit4 = glm(count ~ relevel(spray, "B"), data = InsectSprays, family = "poisson")
exp(summary(fit4)$coef)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda"
load("./data/gaData.rda")
gaData$julian = julian(gaData$date)
head(gaData)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda")
load("./data/gaData.rda")
gaData$julian = julian(gaData$date)
head(gaData)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda", destfile="C:\Users\18662\Desktop\Data Science\7 - Regression\gaData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda", destfile="C:\\Users\18662\Desktop\Data Science\7 - Regression\gaData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda", destfile="C:/Users/18662/Desktop/Data Science/7 - Regression/gaData.rda")
load("C:/Users/18662/Desktop/Data Science/7 - Regression/gaData.rda")
gaData$julian = julian(gaData$date)
head(gaData)
plot(gaData$julian, gaData$visits)
plot(gaData$julian, gaData$visits)
plot(gaData$julian, gaData$visits, pch=19)
plot(gaData$julian, gaData$visits, pch=18)
plot(gaData$julian, gaData$visits, pch=17)
plot(gaData$julian, gaData$visits, pch=10)
plot(gaData$julian, gaData$visits, pch=1)
plot(gaData$julian, gaData$visits, pch=2)
plot(gaData$julian, gaData$visits, pch=3)
plot(gaData$julian, gaData$visits, pch=4)
plot(gaData$julian, gaData$visits, pch=5)
plot(gaData$julian, gaData$visits, pch=6)
plot(gaData$julian, gaData$visits, pch=8)
plot(gaData$julian, gaData$visits, pch=11)
plot(gaData$julian, gaData$visits, pch=15)
plot(gaData$julian, gaData$visits, pch=20)
plot(gaData$julian, gaData$visits, pch=19)
plot(gaData$julian, gaData$visits, pch=20)
plot(gaData$julian, gaData$visits, pch=20, col="blue")
plot(gaData$julian, gaData$visits, pch=20, col="red")
glm1<-glm(gaData$visits~gaData$julian,family="poisson")
lines(gaData$julian,glm1$fitted,col="blue",lwd=3)
symmary(glm1)
summary(glm1)
t = 1:10
t2 <- log(10) + t
offset(t2)
t
t2
?offset
?rhs
View(shuttle)
?rand
?sample
temp = sample(1:100, size=256)
temp = sample(1:100, 256)
temp = sample(1:100,1000,replace=T)
temp = sample(1:100, 256, replace=F)
temp = sample(1:100, 256, replace=T)
shuttle2 = cbind(shuttle, temp)
View(shuttle2)
plot(shuttle2$use, temp)
t = 1; glmt = glm(temp ~ use + offset(t), data=shuttle2, family = poisson)
t = rep(1,256)
glmt = glm(temp ~ use + offset(t), data=shuttle2, family = poisson)
summary(glmt$coef)
summary(glmt)
t2 = t + log(10)
glmt2 = glm(temp ~ use + offset(t2), data=shuttle2, family = poisson)
summary(glmt)$coef
summary(glmt2)$coef
log(10)
summary(glmt2)$coef[1,1]
summary(glmt)$coef[1,1] - summary(glmt2)$coef[1,1]
temp = sample(1:100, 256, replace=T)
shuttle2 = cbind(shuttle, temp)
t = rep(1,256)
glmt = glm(temp ~ use + offset(t), data=shuttle2, family = poisson)
t2 = t + log(10)
glmt2 = glm(temp ~ use + offset(t2), data=shuttle2, family = poisson)
cbind(summary(glmt)$coef[,1], summary(glmt2)$coef[,1])
summary(glmt)$coef[1,1] - summary(glmt2)$coef[1,1]
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
plot(x,y, pch=20)
x = -5:5
y = c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots = 0
splineTerms = sapply(knots,function(knot)(x>knot)*(x-knot))
xMat = cbind(1,x,splineTerms)
yhat = predict(lm(y~xMat-1))
plot(x,y, pch=20)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))$coef
xmat
xMat
x = -5:5
y = c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots = 0
splineTerms = sapply(knots,function(knot)(x>knot)*(x-knot))
xMat = cbind(x,splineTerms)
yhat = predict(lm(y~xMat))
plot(x,y, pch=20)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))$coef
x = -5:5
y = c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots = 0
splineTerms = sapply(knots,function(knot)(x>knot)*(x-knot))
xMat = cbind(x,splineTerms)
yhat = predict(lm(y~xMat))
plot(x,y, pch=20)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))$coef
x = -5:5
y = c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots = 0
splineTerms = sapply(knots,function(knot)(x>knot)*(x-knot))
xMat = cbind(1, x,splineTerms)
yhat = predict(lm(y~xMat-1))
plot(x,y, pch=20)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))$coef
abline(h=2)
abline(v=2)
abline(v=c(0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
)
abline(v=c(0,-0.5,-1,-1.5,-2,-2.5,-3,-3.5,-4,-4.5,-5))
1:3:0.5
?seq
abline(h=seq(0,5,0.5))
2.0372258-1.0241584
x = -5:5
y = c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots = 0
splineTerms = sapply(knots,function(knot)(x>knot)*(x-knot))
xMat = cbind(1, x,splineTerms)
yhat = predict(lm(y~xMat-1))
plot(x,y, pch=20)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))$coef[3,1] - summary(lm(y~xMat-1))$coef[2,1]
x = -5:5
y = c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots = 0
splineTerms = sapply(knots,function(knot)(x>knot)*(x-knot))
xMat = cbind(1, x,splineTerms)
yhat = predict(lm(y~xMat-1))
plot(x,y, pch=20)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))$coef[3,1] + summary(lm(y~xMat-1))$coef[2,1]
data(mtcars)
summary(lm(mpg ~ wt * am))
summary(lm(mpg ~ wt * am, data = mtcars))
summary(lm(mpg ~ am * wt, data = mtcars))
summary(lm(mpg ~ am + wt, data = mtcars))
summary(lm(mpg ~ am * wt * hp, data = mtcars))
summary(lm(mpg ~ am * wt + hp, data = mtcars))
summary(lm(mpg ~ am * wt + hp + wt*hp, data = mtcars))
install.packages("caret", lib="C:/Users/18662/Documents/R/win-library/3.0")
data = kernlab
data(kernlanb)
data(kernlab)
library(kernlab)
install.packages("kernlab", lib="C:/Users/18662/Documents/R/win-library/3.0")
data(kernlab)
data(spam)
library(kernlab)
data(spam)
names(spam)
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling", lib="C:/Users/18662/Documents/R/win-library/3.0")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
library(ggplot2)
qplot(CompressiveStrength, data=training)
plot(training$CompressiveStrength)
qplot(th, CompressiveStrength, data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = Age, data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = Cement, data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = Superplasticizer, data=training)
summary(training$Age)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = FlyAsh, data=training)
install.packages("Hmisc", lib="C:/Users/18662/Documents/R/win-library/3.0")
cutAge = cut2(training$Age, g=4)
library(Hmisc)
cutAge = cut2(training$Age, g=4)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cutAge, data=training)
View(training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training$Cement, g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training$BlastFurnaceSlag, g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,BlastFurnaceSlag], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,2], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,3], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,4], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,5], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,6], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,7], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,8], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, colour = cut2(training[,9], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, color = cut2(training[,9], g=4), data=training)
qplot(seq_along(CompressiveStrength), CompressiveStrength, color = cut2(training[,9], g=4), data=training)
library(ggplot)
library(ggplot2)
library(caret)
qplot(seq_along(CompressiveStrength), CompressiveStrength, color = cut2(training[,9], g=4), data=training)
library(Hmisc)
qplot(seq_along(CompressiveStrength), CompressiveStrength, color = cut2(training[,9], g=4), data=training)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
?preProc
?preProcess
summary(Superplasticizer)
summary(training$Superplasticizer)
log10(0)
summary(log10(training$Superplasticizer))
summary(log10(training$Superplasticizer+1))
qplot(log10(training$Superplasticizer+1))
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
trainingSub = training[,58:79]
names(trainingSub)
trainingSub = training[,58:69]
names(trainingSub)
?preProcess
preProc = preProcess(trainingSub, method="pca", thresh=0.8)
preProc[1]
preProc[2]
preProc[3]
preProc[4]
preProc[5]
preProc[6]
preProc[7]
preProc[8]
preProc[9]
trainPC = predict(preProc, trainingSub)
modelFitPC = train(training$diagnosis ~, method="glm", data=trainPC)
modelFitPC = train(training$diagnosis ~., method="glm", data=trainPC)
install.packages('e1071', dependencies=TRUE)
modelFitPC = train(training$diagnosis ~., method="glm", data=trainPC)
modelFit = train(training$diagnosis ~., method="glm", data=trainingSub)
confusionMatrix(modelFit)
confusionMatrix(modelFitPC)
modelFitPC = train(training$diagnosis ~., method="glm", data=trainPC)
modelFit   = train(training$diagnosis ~., method="glm", data=trainingSub)
testPC = predict(preProc, testingSub)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
testingSub  = testing[,58:69]
testPC = predict(preProc, testingSub)
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
names(testPC)
names(testingSub)
predict(modelFit, testPC)
confusionMatrix(testing$diagnosis, predict(modelFit, testingSub))
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
confusionMatrix(testing$diagnosis, predict(modelFitPC, testPC))
x=5
x=1
?Methods
?lm
?dgamma
?colSums
?show
?showMethods
?getMethod
?getClass
?Methods
?colSums
?show
setwd("C:/Users/18662/Desktop/Data Science/9 - Data Products/CourseProject")
library(shiny)
runApp()
runApp()
